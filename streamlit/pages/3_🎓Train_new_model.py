import io
import logging
import uuid

import pandas as pd
import requests
import streamlit as st
from streamlit.runtime.uploaded_file_manager import UploadedFile

from util.check_dataset import check_uploaded_data
from util.logging_handler import configure_logger

st.set_page_config(page_title="Fit", page_icon="üéì")

logger = configure_logger(__name__, logging.DEBUG)

st.markdown("# –û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å")
st.sidebar.header("–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å")
st.write(
    """–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.
    –í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏.""")


@st.cache_data
def load_data(file: UploadedFile) -> pd.DataFrame:
    return pd.read_parquet(file)


@st.cache_data
def fit_model(data: pd.DataFrame, model_config: dict) -> None:
    parquet_buffer = io.BytesIO()
    data.to_parquet(parquet_buffer, index=False)
    parquet_buffer.seek(0)

    files = {
        "file": ("data.parquet", parquet_buffer, "application/octet-stream")
    }

    response = requests.post(
        st.session_state.backend_url + "/fit",
        data=model_config,
        files=files
    )

    if response.status_code != 200:
        logger.error(response.text)
        return []
    logger.debug(response.json())
    return response.json()


model_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏", ("Social üßª", "News üì∞"))
model_type_normalized = "social" if model_type == "Social üßª" else "news"
st.write(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –º–æ–¥–µ–ª–∏: {model_type}")

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ parquet-—Ñ–∞–π–ª —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", type=["parquet"])

if uploaded_file:
    df = load_data(uploaded_file)
    correct, error_message = check_uploaded_data(df, model_type, True)
    if correct:
        st.write("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        st.error(error_message)

    desc = st.text_input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", value="–ú–æ—è –ø–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å")
    hyper = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON", value='{"n_estimators": 100, "max_depth": 5}')
    model_id = str(uuid.uuid4())

    model_config = {
        "id": model_id,
        "type": model_type_normalized,
        "description": desc,
        "hyperparameters": hyper
    }

    fit_model_button = st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
    if fit_model_button:

        response = requests.post(st.session_state.backend_url + "/fit", json=model_config)
        if response.status_code != 200:
            logger.error(response.text)
            st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
        else:
            logger.debug(response.json())
            st.success("–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
